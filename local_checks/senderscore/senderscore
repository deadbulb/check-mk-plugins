#!/usr/bin/perl

#
#	check_mk local check senderscore
#	
#	fetches all sendercore scores for public ip addresses
#	
#	recommended interval: 6 hours
#
#	Needs:
#
#	- perl module Net::DNS::Resolver (Debian/Ubuntu-Package: libnet-dns-perl)
#

use warnings;
use strict;
use Net::DNS::Resolver;
my $resolver = new Net::DNS::Resolver();
my $rbl_addr = "score.senderscore.com";

# add the minimum score for the warn/crit state
# set values to 0 to disable warn/crit state
my $score_warn = 0;
my $score_crit = 0;

sub get_ips {

        # get ips from ip and ifconfig

        my $ips={};
        my $res = open(my $ifconfig,"/sbin/ifconfig 2>&1|");

        if($res) {
                while(<$ifconfig>)
                        {
                        if(/\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b/) {
                                $ips->{"$1"}=1;
                        }
                }
                close($ifconfig);
        }

        $res = open(my $ip,"ip addr show 2>&1|");
        if($res) {
                while(<$ip>)
                        {
                        if(/\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b/) {
                                $ips->{"$1"}=1;
                        }
                }
                close($ip);
        }

        return $ips;
}
sub ip_rev {

        my $ip = shift;
        my @octets = split /\./,$ip;
        return join(".",reverse(@octets));
}

sub filter_ips {

        # filter out private ips (rfc1918)

        my $ips = shift;
        my $ips_new = {};
        foreach(keys %{$ips}) {
                next if /^192\.168\./;
                next if /^127\./;
                next if /^10\./;
                next if /^172\.([12][0-9]|3[01])\./;
                $ips_new->{"$_"}=1;
        }
        return $ips_new;
}

sub get_score {

        # retrieve the score via dns lookup

        my $ip = shift;
        my $ip_rev = ip_rev($ip);
        my $query_target= "$ip_rev.$rbl_addr";
        my $resolved = $resolver->query($query_target);
        if($resolved) {
                # Perl Net::DNS::Resolver does relyably return the address, so 
                # I'm parsing it myself from the text representation of the answer
                # (pebcak?)
                #
                # OUTPUT EXAMPLE
                # ;; ANSWER SECTION (1 record)
                # 5.4.3.2.score.senderscore.com.    10      IN      A       127.0.4.83
                #
                my ($score) = $resolved->string =~ m/$query_target.*IN.*A.*127\.[0-9]+\.[0-9]+\.([0-9]+)/;
                return $score;
        }
}

sub mk_checkmk_line {

	# generate check_mk line

        my ($ip,$score) = @_;
	my $state=0;
	$state=1 if($score <= $score_warn);
	$state=2 if($score <= $score_crit);
        print "$state senderscore_$ip score=$score Senderscore value for ip $ip is $score\n";

}

sub main {
        my $ips = filter_ips(get_ips());
        my $score="";
        foreach(keys %{$ips}) {
                $score = get_score($_);
                if ($score) {
                        mk_checkmk_line($_,$score);
                }
        }
}

main();
